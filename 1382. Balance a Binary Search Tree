/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode balanceBST(TreeNode root) {
        List <Integer> sortedList= new ArrayList<>();
        InorderTraversal(root, sortedList);
        return buildBalancedBST(sortedList,0, sortedList.size()-1);
    }
        private void InorderTraversal(TreeNode node, List<Integer> list)
        {
            if(node==null) return;
            InorderTraversal(node.left, list);
            list.add(node.val);
            InorderTraversal(node.right,list);
            
        } 
        private TreeNode buildBalancedBST(List<Integer>list, int left, int right)
        {
            if(left>right) return null;
            int mid= left+(right-left)/2;
            TreeNode root= new TreeNode(list.get(mid));
            root.left= buildBalancedBST(list, left, mid-1);
            root.right= buildBalancedBST(list, mid+1, right);
            return root;
        }

        
    }
