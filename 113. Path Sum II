/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> fans = new ArrayList<>();
    List<Integer> ans = new ArrayList<>();

    void func(TreeNode root, int ts) {
        if (root == null)
            return;

        ts -= root.val;
        ans.add(root.val);

        if (ts == 0 && root.left == null && root.right == null) {
            // Add a copy of ans
            fans.add(new ArrayList<>(ans));
        }

        func(root.left, ts);
        func(root.right, ts);

        ans.remove(ans.size() - 1); // backtrack
    }

    public List<List<Integer>> pathSum(TreeNode root, int ts) {
        func(root, ts);
        return fans;
    }
}
